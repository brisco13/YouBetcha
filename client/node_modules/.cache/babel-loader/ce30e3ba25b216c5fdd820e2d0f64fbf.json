{"ast":null,"code":"import \"../../utilities/globals/index.js\";\nimport { useState, useRef, useEffect } from 'react';\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport { equal } from '@wry/equality';\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nexport function useSubscription(subscription, options) {\n  var hasIssuedDeprecationWarningRef = useRef(false);\n  var client = useApolloClient(options === null || options === void 0 ? void 0 : options.client);\n  verifyDocumentType(subscription, DocumentType.Subscription);\n\n  var _a = useState({\n    loading: !(options === null || options === void 0 ? void 0 : options.skip),\n    error: void 0,\n    data: void 0,\n    variables: options === null || options === void 0 ? void 0 : options.variables\n  }),\n      result = _a[0],\n      setResult = _a[1];\n\n  if (!hasIssuedDeprecationWarningRef.current) {\n    hasIssuedDeprecationWarningRef.current = true;\n\n    if (options === null || options === void 0 ? void 0 : options.onSubscriptionData) {\n      __DEV__ && invariant.warn(options.onData ? \"'useSubscription' supports only the 'onSubscriptionData' or 'onData' option, but not both. Only the 'onData' option will be used.\" : \"'onSubscriptionData' is deprecated and will be removed in a future major version. Please use the 'onData' option instead.\");\n    }\n\n    if (options === null || options === void 0 ? void 0 : options.onSubscriptionComplete) {\n      __DEV__ && invariant.warn(options.onComplete ? \"'useSubscription' supports only the 'onSubscriptionComplete' or 'onComplete' option, but not both. Only the 'onComplete' option will be used.\" : \"'onSubscriptionComplete' is deprecated and will be removed in a future major version. Please use the 'onComplete' option instead.\");\n    }\n  }\n\n  var _b = useState(function () {\n    if (options === null || options === void 0 ? void 0 : options.skip) {\n      return null;\n    }\n\n    return client.subscribe({\n      query: subscription,\n      variables: options === null || options === void 0 ? void 0 : options.variables,\n      fetchPolicy: options === null || options === void 0 ? void 0 : options.fetchPolicy,\n      context: options === null || options === void 0 ? void 0 : options.context\n    });\n  }),\n      observable = _b[0],\n      setObservable = _b[1];\n\n  var canResetObservableRef = useRef(false);\n  useEffect(function () {\n    return function () {\n      canResetObservableRef.current = true;\n    };\n  }, []);\n  var ref = useRef({\n    client: client,\n    subscription: subscription,\n    options: options\n  });\n  useEffect(function () {\n    var _a, _b, _c, _d;\n\n    var shouldResubscribe = options === null || options === void 0 ? void 0 : options.shouldResubscribe;\n\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(options);\n    }\n\n    if (options === null || options === void 0 ? void 0 : options.skip) {\n      if (!(options === null || options === void 0 ? void 0 : options.skip) !== !((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.skip) || canResetObservableRef.current) {\n        setResult({\n          loading: false,\n          data: void 0,\n          error: void 0,\n          variables: options === null || options === void 0 ? void 0 : options.variables\n        });\n        setObservable(null);\n        canResetObservableRef.current = false;\n      }\n    } else if (shouldResubscribe !== false && (client !== ref.current.client || subscription !== ref.current.subscription || (options === null || options === void 0 ? void 0 : options.fetchPolicy) !== ((_b = ref.current.options) === null || _b === void 0 ? void 0 : _b.fetchPolicy) || !(options === null || options === void 0 ? void 0 : options.skip) !== !((_c = ref.current.options) === null || _c === void 0 ? void 0 : _c.skip) || !equal(options === null || options === void 0 ? void 0 : options.variables, (_d = ref.current.options) === null || _d === void 0 ? void 0 : _d.variables)) || canResetObservableRef.current) {\n      setResult({\n        loading: true,\n        data: void 0,\n        error: void 0,\n        variables: options === null || options === void 0 ? void 0 : options.variables\n      });\n      setObservable(client.subscribe({\n        query: subscription,\n        variables: options === null || options === void 0 ? void 0 : options.variables,\n        fetchPolicy: options === null || options === void 0 ? void 0 : options.fetchPolicy,\n        context: options === null || options === void 0 ? void 0 : options.context\n      }));\n      canResetObservableRef.current = false;\n    }\n\n    Object.assign(ref.current, {\n      client: client,\n      subscription: subscription,\n      options: options\n    });\n  }, [client, subscription, options, canResetObservableRef.current]);\n  useEffect(function () {\n    if (!observable) {\n      return;\n    }\n\n    var subscription = observable.subscribe({\n      next: function (fetchResult) {\n        var _a, _b;\n\n        var result = {\n          loading: false,\n          data: fetchResult.data,\n          error: void 0,\n          variables: options === null || options === void 0 ? void 0 : options.variables\n        };\n        setResult(result);\n\n        if ((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onData) {\n          ref.current.options.onData({\n            client: client,\n            data: result\n          });\n        } else if ((_b = ref.current.options) === null || _b === void 0 ? void 0 : _b.onSubscriptionData) {\n          ref.current.options.onSubscriptionData({\n            client: client,\n            subscriptionData: result\n          });\n        }\n      },\n      error: function (error) {\n        var _a, _b;\n\n        setResult({\n          loading: false,\n          data: void 0,\n          error: error,\n          variables: options === null || options === void 0 ? void 0 : options.variables\n        });\n        (_b = (_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onError) === null || _b === void 0 ? void 0 : _b.call(_a, error);\n      },\n      complete: function () {\n        var _a, _b;\n\n        if ((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onComplete) {\n          ref.current.options.onComplete();\n        } else if ((_b = ref.current.options) === null || _b === void 0 ? void 0 : _b.onSubscriptionComplete) {\n          ref.current.options.onSubscriptionComplete();\n        }\n      }\n    });\n    return function () {\n      subscription.unsubscribe();\n    };\n  }, [observable]);\n  return result;\n}","map":{"version":3,"mappings":"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","names":["useState","useRef","useEffect","invariant","equal","DocumentType","verifyDocumentType","useApolloClient","useSubscription","subscription","options","hasIssuedDeprecationWarningRef","client","Subscription","loading","skip","error","data","variables","result","setResult","current","onSubscriptionData","__DEV__","onSubscriptionComplete","subscribe","query","fetchPolicy","context","observable","setObservable","canResetObservableRef","ref","shouldResubscribe","_a","_b","_c","_d","Object","assign","next","fetchResult","onData","subscriptionData","onError","complete","onComplete","unsubscribe"],"sources":["/Users/amccorkl/Computer/Project3/YouBetcha/client/node_modules/@apollo/src/react/hooks/useSubscription.ts"],"sourcesContent":["import '../../utilities/globals';\nimport { useState, useRef, useEffect } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport { invariant } from '../../utilities/globals'\nimport { equal } from '@wry/equality';\n\nimport { DocumentType, verifyDocumentType } from '../parser';\nimport {\n  SubscriptionHookOptions,\n  SubscriptionResult\n} from '../types/types';\nimport { OperationVariables } from '../../core';\nimport { useApolloClient } from './useApolloClient';\n\nexport function useSubscription<TData = any, TVariables = OperationVariables>(\n  subscription: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: SubscriptionHookOptions<TData, TVariables>,\n) {\n  const hasIssuedDeprecationWarningRef = useRef(false);\n  const client = useApolloClient(options?.client);\n  verifyDocumentType(subscription, DocumentType.Subscription);\n  const [result, setResult] = useState<SubscriptionResult<TData>>({\n    loading: !options?.skip,\n    error: void 0,\n    data: void 0,\n    variables: options?.variables,\n  });\n\n  if (!hasIssuedDeprecationWarningRef.current) {\n    hasIssuedDeprecationWarningRef.current = true;\n\n    if (options?.onSubscriptionData) {\n      invariant.warn(\n        options.onData\n          ? \"'useSubscription' supports only the 'onSubscriptionData' or 'onData' option, but not both. Only the 'onData' option will be used.\"\n          : \"'onSubscriptionData' is deprecated and will be removed in a future major version. Please use the 'onData' option instead.\"\n      );\n    }\n\n    if (options?.onSubscriptionComplete) {\n      invariant.warn(\n        options.onComplete\n          ? \"'useSubscription' supports only the 'onSubscriptionComplete' or 'onComplete' option, but not both. Only the 'onComplete' option will be used.\"\n          : \"'onSubscriptionComplete' is deprecated and will be removed in a future major version. Please use the 'onComplete' option instead.\"\n      );\n    }\n  }\n\n  const [observable, setObservable] = useState(() => {\n    if (options?.skip) {\n      return null;\n    }\n\n    return client.subscribe({\n      query: subscription,\n      variables: options?.variables,\n      fetchPolicy: options?.fetchPolicy,\n      context: options?.context,\n    });\n  });\n\n  const canResetObservableRef = useRef(false);\n  useEffect(() => {\n    return () => {\n      canResetObservableRef.current = true;\n    };\n  }, []);\n\n  const ref = useRef({ client, subscription, options });\n  useEffect(() => {\n    let shouldResubscribe = options?.shouldResubscribe;\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(options!);\n    }\n\n    if (options?.skip) {\n      if (!options?.skip !== !ref.current.options?.skip || canResetObservableRef.current) {\n        setResult({\n          loading: false,\n          data: void 0,\n          error: void 0,\n          variables: options?.variables,\n        });\n        setObservable(null);\n        canResetObservableRef.current = false;\n      }\n    } else if (\n      (shouldResubscribe !== false &&\n        (client !== ref.current.client ||\n          subscription !== ref.current.subscription ||\n          options?.fetchPolicy !== ref.current.options?.fetchPolicy ||\n          !options?.skip !== !ref.current.options?.skip ||\n          !equal(options?.variables, ref.current.options?.variables))) ||\n      canResetObservableRef.current\n    ) {\n      setResult({\n        loading: true,\n        data: void 0,\n        error: void 0,\n        variables: options?.variables,\n      });\n      setObservable(client.subscribe({\n        query: subscription,\n        variables: options?.variables,\n        fetchPolicy: options?.fetchPolicy,\n        context: options?.context,\n      }));\n      canResetObservableRef.current = false;\n    }\n\n    Object.assign(ref.current, { client, subscription, options });\n  }, [client, subscription, options, canResetObservableRef.current]);\n\n  useEffect(() => {\n    if (!observable) {\n      return;\n    }\n\n    const subscription = observable.subscribe({\n      next(fetchResult) {\n        const result = {\n          loading: false,\n          // TODO: fetchResult.data can be null but SubscriptionResult.data\n          // expects TData | undefined only\n          data: fetchResult.data!,\n          error: void 0,\n          variables: options?.variables,\n        };\n        setResult(result);\n\n        if (ref.current.options?.onData) {\n          ref.current.options.onData({\n            client,\n            data: result\n          });\n        } else if (ref.current.options?.onSubscriptionData) {\n          ref.current.options.onSubscriptionData({\n            client,\n            subscriptionData: result\n          });\n        }\n      },\n      error(error) {\n        setResult({\n          loading: false,\n          data: void 0,\n          error,\n          variables: options?.variables,\n        });\n        ref.current.options?.onError?.(error);\n      },\n      complete() {\n        if (ref.current.options?.onComplete) {\n          ref.current.options.onComplete();\n        } else if (ref.current.options?.onSubscriptionComplete) {\n          ref.current.options.onSubscriptionComplete();\n        }\n      },\n    });\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [observable]);\n\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}