{"ast":null,"code":"import { __assign, __spreadArray } from \"tslib\";\nimport { visit } from \"graphql\";\nimport { wrap } from \"optimism\";\nimport { getFragmentDefinitions } from \"../../utilities/index.js\";\nexport function createFragmentRegistry() {\n  var fragments = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    fragments[_i] = arguments[_i];\n  }\n\n  return new (FragmentRegistry.bind.apply(FragmentRegistry, __spreadArray([void 0], fragments, false)))();\n}\nvar arrayLikeForEach = Array.prototype.forEach;\n\nvar FragmentRegistry = function () {\n  function FragmentRegistry() {\n    var fragments = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      fragments[_i] = arguments[_i];\n    }\n\n    this.registry = Object.create(null);\n    this.resetCaches();\n\n    if (fragments.length) {\n      this.register.apply(this, fragments);\n    }\n  }\n\n  FragmentRegistry.prototype.register = function () {\n    var _this = this;\n\n    var definitions = new Map();\n    arrayLikeForEach.call(arguments, function (doc) {\n      getFragmentDefinitions(doc).forEach(function (node) {\n        definitions.set(node.name.value, node);\n      });\n    });\n    definitions.forEach(function (node, name) {\n      if (node !== _this.registry[name]) {\n        _this.registry[name] = node;\n\n        _this.invalidate(name);\n      }\n    });\n    return this;\n  };\n\n  FragmentRegistry.prototype.invalidate = function (name) {};\n\n  FragmentRegistry.prototype.resetCaches = function () {\n    this.invalidate = (this.lookup = this.cacheUnaryMethod(\"lookup\")).dirty;\n    this.transform = this.cacheUnaryMethod(\"transform\");\n    this.findFragmentSpreads = this.cacheUnaryMethod(\"findFragmentSpreads\");\n  };\n\n  FragmentRegistry.prototype.cacheUnaryMethod = function (name) {\n    var registry = this;\n    var originalMethod = FragmentRegistry.prototype[name];\n    return wrap(function () {\n      return originalMethod.apply(registry, arguments);\n    }, {\n      makeCacheKey: function (arg) {\n        return arg;\n      }\n    });\n  };\n\n  FragmentRegistry.prototype.lookup = function (fragmentName) {\n    return this.registry[fragmentName] || null;\n  };\n\n  FragmentRegistry.prototype.transform = function (document) {\n    var _this = this;\n\n    var defined = new Map();\n    getFragmentDefinitions(document).forEach(function (def) {\n      defined.set(def.name.value, def);\n    });\n    var unbound = new Set();\n\n    var enqueue = function (spreadName) {\n      if (!defined.has(spreadName)) {\n        unbound.add(spreadName);\n      }\n    };\n\n    var enqueueChildSpreads = function (node) {\n      return Object.keys(_this.findFragmentSpreads(node)).forEach(enqueue);\n    };\n\n    enqueueChildSpreads(document);\n    var missing = [];\n    var map = Object.create(null);\n    unbound.forEach(function (fragmentName) {\n      var knownFragmentDef = defined.get(fragmentName);\n\n      if (knownFragmentDef) {\n        enqueueChildSpreads(map[fragmentName] = knownFragmentDef);\n      } else {\n        missing.push(fragmentName);\n\n        var def = _this.lookup(fragmentName);\n\n        if (def) {\n          enqueueChildSpreads(map[fragmentName] = def);\n        }\n      }\n    });\n\n    if (missing.length) {\n      var defsToAppend_1 = [];\n      missing.forEach(function (name) {\n        var def = map[name];\n\n        if (def) {\n          defsToAppend_1.push(def);\n        }\n      });\n\n      if (defsToAppend_1.length) {\n        document = __assign(__assign({}, document), {\n          definitions: document.definitions.concat(defsToAppend_1)\n        });\n      }\n    }\n\n    return document;\n  };\n\n  FragmentRegistry.prototype.findFragmentSpreads = function (root) {\n    var spreads = Object.create(null);\n    visit(root, {\n      FragmentSpread: function (node) {\n        spreads[node.name.value] = node;\n      }\n    });\n    return spreads;\n  };\n\n  return FragmentRegistry;\n}();","map":{"version":3,"mappings":";AAAA,SAKEA,KALF,QAMO,SANP;AAQA,SAASC,IAAT,QAAqB,UAArB;AAEA,SAAsBC,sBAAtB,QAAoD,0BAApD;AAcA,OAAM,SAAUC,sBAAV,GAAgC;EACpC;;OAAA,yCAA4B;IAA5BC;;;EAEA,YAAWC,gBAAgB,KAAhB,CAAgBC,KAAhB,mBAAgBC,wBAAIH,SAAJ,EAAa,KAAb,CAAhB,CAAX;AACD;AAEO,IAASI,gBAAgB,GAAKC,KAAK,CAACC,SAAN,CAAeC,OAA7C;;AAER;EAME;IAAY;;SAAA,yCAA4B;MAA5BP;;;IALJ,gBAAwBQ,MAAM,CAACC,MAAP,CAAc,IAAd,CAAxB;IAMN,KAAKC,WAAL;;IACA,IAAIV,SAAS,CAACW,MAAd,EAAsB;MACpB,KAAKC,QAAL,CAAcV,KAAd,CAAoB,IAApB,EAA0BF,SAA1B;IACD;EACF;;EAEMC,sCAAP;IAAA;;IACE,IAAMY,WAAW,GAAG,IAAIC,GAAJ,EAApB;IACAV,gBAAgB,CAACW,IAAjB,CAAsBC,SAAtB,EAAiC,UAACC,GAAD,EAAkB;MACjDnB,sBAAsB,CAACmB,GAAD,CAAtB,CAA4BV,OAA5B,CAAoC,gBAAI;QACtCM,WAAW,CAACK,GAAZ,CAAgBC,IAAI,CAACC,IAAL,CAAUC,KAA1B,EAAiCF,IAAjC;MACD,CAFD;IAGD,CAJD;IAMAN,WAAW,CAACN,OAAZ,CAAoB,UAACY,IAAD,EAAOC,IAAP,EAAW;MAC7B,IAAID,IAAI,KAAKG,KAAI,CAACC,QAAL,CAAcH,IAAd,CAAb,EAAkC;QAChCE,KAAI,CAACC,QAAL,CAAcH,IAAd,IAAsBD,IAAtB;;QACAG,KAAI,CAACE,UAAL,CAAgBJ,IAAhB;MACD;IACF,CALD;IAOA,OAAO,IAAP;EACD,CAhBM;;EAmBCnB,wCAAR,UAAmBmB,IAAnB,EAA+B,CAAI,CAA3B;;EAEDnB,yCAAP;IACE,KAAKuB,UAAL,GAAkB,CAChB,KAAKC,MAAL,GAAc,KAAKC,gBAAL,CAAsB,QAAtB,CADE,EAEhBC,KAFF;IAGA,KAAKC,SAAL,GAAiB,KAAKF,gBAAL,CAAsB,WAAtB,CAAjB;IACA,KAAKG,mBAAL,GAA2B,KAAKH,gBAAL,CAAsB,qBAAtB,CAA3B;EACD,CANM;;EAQCzB,8CAAR,UAIGmB,IAJH,EAIc;IACZ,IAAMG,QAAQ,GAAG,IAAjB;IACA,IAAMO,cAAc,GAAG7B,gBAAgB,CAACK,SAAjB,CAA2Bc,IAA3B,CAAvB;IACA,OAAOvB,IAAI,CAAC;MACV,OAAOiC,cAAc,CAAC5B,KAAf,CAAqBqB,QAArB,EAA+BP,SAA/B,CAAP;IACD,CAFU,EAER;MACDe,YAAY,EAAE,eAAG;QAAI;MAAG;IADvB,CAFQ,CAAX;EAKD,CAZO;;EAcD9B,oCAAP,UAAc+B,YAAd,EAAkC;IAChC,OAAO,KAAKT,QAAL,CAAcS,YAAd,KAA+B,IAAtC;EACD,CAFM;;EAIA/B,uCAAP,UAAyCgC,QAAzC,EAAoD;IAApD;;IACE,IAAMC,OAAO,GAAG,IAAIpB,GAAJ,EAAhB;IACAhB,sBAAsB,CAACmC,QAAD,CAAtB,CAAiC1B,OAAjC,CAAyC,eAAG;MAC1C2B,OAAO,CAAChB,GAAR,CAAYiB,GAAG,CAACf,IAAJ,CAASC,KAArB,EAA4Bc,GAA5B;IACD,CAFD;IAIA,IAAMC,OAAO,GAAG,IAAIC,GAAJ,EAAhB;;IACA,IAAMC,OAAO,GAAG,UAACC,UAAD,EAAmB;MACjC,IAAI,CAACL,OAAO,CAACM,GAAR,CAAYD,UAAZ,CAAL,EAA8B;QAC5BH,OAAO,CAACK,GAAR,CAAYF,UAAZ;MACD;IACF,CAJD;;IAMA,IAAMG,mBAAmB,GAAG,UAACvB,IAAD,EAAc;MAAK,aAAM,CAACwB,IAAP,CAC7CrB,KAAI,CAACO,mBAAL,CAAyBV,IAAzB,CAD6C,EAE7CZ,OAF6C,CAErC+B,OAFqC;IAE7B,CAFlB;;IAIAI,mBAAmB,CAACT,QAAD,CAAnB;IAEA,IAAMW,OAAO,GAAa,EAA1B;IACA,IAAMC,GAAG,GAAgBrC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAzB;IAIA2B,OAAO,CAAC7B,OAAR,CAAgB,wBAAY;MAC1B,IAAMuC,gBAAgB,GAAGZ,OAAO,CAACa,GAAR,CAAYf,YAAZ,CAAzB;;MACA,IAAIc,gBAAJ,EAAsB;QACpBJ,mBAAmB,CAACG,GAAG,CAACb,YAAD,CAAH,GAAoBc,gBAArB,CAAnB;MACD,CAFD,MAEO;QACLF,OAAO,CAACI,IAAR,CAAahB,YAAb;;QACA,IAAMG,GAAG,GAAGb,KAAI,CAACG,MAAL,CAAYO,YAAZ,CAAZ;;QACA,IAAIG,GAAJ,EAAS;UACPO,mBAAmB,CAACG,GAAG,CAACb,YAAD,CAAH,GAAoBG,GAArB,CAAnB;QACD;MACF;IACF,CAXD;;IAaA,IAAIS,OAAO,CAACjC,MAAZ,EAAoB;MAClB,IAAMsC,cAAY,GAA6B,EAA/C;MACAL,OAAO,CAACrC,OAAR,CAAgB,gBAAI;QAClB,IAAM4B,GAAG,GAAGU,GAAG,CAACzB,IAAD,CAAf;;QACA,IAAIe,GAAJ,EAAS;UACPc,cAAY,CAACD,IAAb,CAAkBb,GAAlB;QACD;MACF,CALD;;MAOA,IAAIc,cAAY,CAACtC,MAAjB,EAAyB;QACvBsB,QAAQ,yBACHA,QADG,GACK;UACXpB,WAAW,EAAEoB,QAAQ,CAACpB,WAAT,CAAqBqC,MAArB,CAA4BD,cAA5B;QADF,CADL,CAAR;MAID;IACF;;IAED,OAAOhB,QAAP;EACD,CAvDM;;EAyDAhC,iDAAP,UAA2BkD,IAA3B,EAAwC;IACtC,IAAMC,OAAO,GAAsB5C,MAAM,CAACC,MAAP,CAAc,IAAd,CAAnC;IAEAb,KAAK,CAACuD,IAAD,EAAO;MACVE,cAAc,YAAClC,IAAD,EAAK;QACjBiC,OAAO,CAACjC,IAAI,CAACC,IAAL,CAAUC,KAAX,CAAP,GAA2BF,IAA3B;MACD;IAHS,CAAP,CAAL;IAMA,OAAOiC,OAAP;EACD,CAVM;;EAWT;AAAC,CAhID","names":["visit","wrap","getFragmentDefinitions","createFragmentRegistry","fragments","FragmentRegistry","apply","__spreadArray","arrayLikeForEach","Array","prototype","forEach","Object","create","resetCaches","length","register","definitions","Map","call","arguments","doc","set","node","name","value","_this","registry","invalidate","lookup","cacheUnaryMethod","dirty","transform","findFragmentSpreads","originalMethod","makeCacheKey","fragmentName","document","defined","def","unbound","Set","enqueue","spreadName","has","add","enqueueChildSpreads","keys","missing","map","knownFragmentDef","get","push","defsToAppend_1","concat","root","spreads","FragmentSpread"],"sources":["/Users/amccorkl/Computer/Project3/YouBetcha/client/node_modules/@apollo/src/cache/inmemory/fragmentRegistry.ts"],"sourcesContent":["import {\n  DocumentNode,\n  ASTNode,\n  FragmentDefinitionNode,\n  FragmentSpreadNode,\n  visit,\n} from \"graphql\";\n\nimport { wrap } from \"optimism\";\n\nimport { FragmentMap, getFragmentDefinitions } from \"../../utilities\";\n\nexport interface FragmentRegistryAPI {\n  register(...fragments: DocumentNode[]): this;\n  lookup(fragmentName: string): FragmentDefinitionNode | null;\n  transform<D extends DocumentNode>(document: D): D;\n}\n\n// As long as createFragmentRegistry is not imported or used, the\n// FragmentRegistry example implementation provided below should not be bundled\n// (by tree-shaking bundlers like Rollup), because the implementation of\n// InMemoryCache refers only to the TypeScript interface FragmentRegistryAPI,\n// never the concrete implementation FragmentRegistry (which is deliberately not\n// exported from this module).\nexport function createFragmentRegistry(\n  ...fragments: DocumentNode[]\n): FragmentRegistryAPI {\n  return new FragmentRegistry(...fragments);\n}\n\nconst { forEach: arrayLikeForEach } = Array.prototype;\n\nclass FragmentRegistry implements FragmentRegistryAPI {\n  private registry: FragmentMap = Object.create(null);\n\n  // Call static method FragmentRegistry.from(...) instead of invoking the\n  // FragmentRegistry constructor directly. This reserves the constructor for\n  // future configuration of the FragmentRegistry.\n  constructor(...fragments: DocumentNode[]) {\n    this.resetCaches();\n    if (fragments.length) {\n      this.register.apply(this, fragments);\n    }\n  }\n\n  public register(): this {\n    const definitions = new Map<string, FragmentDefinitionNode>();\n    arrayLikeForEach.call(arguments, (doc: DocumentNode) => {\n      getFragmentDefinitions(doc).forEach(node => {\n        definitions.set(node.name.value, node);\n      });\n    });\n\n    definitions.forEach((node, name) => {\n      if (node !== this.registry[name]) {\n        this.registry[name] = node;\n        this.invalidate(name);\n      }\n    });\n\n    return this;\n  }\n\n  // Overridden in the resetCaches method below.\n  private invalidate(name: string) {}\n\n  public resetCaches() {\n    this.invalidate = (\n      this.lookup = this.cacheUnaryMethod(\"lookup\")\n    ).dirty; // This dirty function is bound to the wrapped lookup method.\n    this.transform = this.cacheUnaryMethod(\"transform\");\n    this.findFragmentSpreads = this.cacheUnaryMethod(\"findFragmentSpreads\");\n  }\n\n  private cacheUnaryMethod<TName extends keyof Pick<FragmentRegistry,\n    | \"lookup\"\n    | \"transform\"\n    | \"findFragmentSpreads\"\n  >>(name: TName) {\n    const registry = this;\n    const originalMethod = FragmentRegistry.prototype[name];\n    return wrap(function () {\n      return originalMethod.apply(registry, arguments);\n    }, {\n      makeCacheKey: arg => arg,\n    });\n  }\n\n  public lookup(fragmentName: string): FragmentDefinitionNode | null {\n    return this.registry[fragmentName] || null;\n  }\n\n  public transform<D extends DocumentNode>(document: D): D {\n    const defined = new Map<string, FragmentDefinitionNode>();\n    getFragmentDefinitions(document).forEach(def => {\n      defined.set(def.name.value, def);\n    });\n\n    const unbound = new Set<string>();\n    const enqueue = (spreadName: string) => {\n      if (!defined.has(spreadName)) {\n        unbound.add(spreadName);\n      }\n    };\n\n    const enqueueChildSpreads = (node: ASTNode) => Object.keys(\n      this.findFragmentSpreads(node)\n    ).forEach(enqueue);\n\n    enqueueChildSpreads(document);\n\n    const missing: string[] = [];\n    const map: FragmentMap = Object.create(null);\n\n    // This Set forEach loop can be extended during iteration by adding\n    // additional strings to the unbound set.\n    unbound.forEach(fragmentName => {\n      const knownFragmentDef = defined.get(fragmentName);\n      if (knownFragmentDef) {\n        enqueueChildSpreads(map[fragmentName] = knownFragmentDef);\n      } else {\n        missing.push(fragmentName);\n        const def = this.lookup(fragmentName);\n        if (def) {\n          enqueueChildSpreads(map[fragmentName] = def);\n        }\n      }\n    });\n\n    if (missing.length) {\n      const defsToAppend: FragmentDefinitionNode[] = [];\n      missing.forEach(name => {\n        const def = map[name];\n        if (def) {\n          defsToAppend.push(def);\n        }\n      });\n\n      if (defsToAppend.length) {\n        document = {\n          ...document,\n          definitions: document.definitions.concat(defsToAppend),\n        };\n      }\n    }\n\n    return document;\n  }\n\n  public findFragmentSpreads(root: ASTNode): FragmentSpreadMap {\n    const spreads: FragmentSpreadMap = Object.create(null);\n\n    visit(root, {\n      FragmentSpread(node) {\n        spreads[node.name.value] = node;\n      },\n    });\n\n    return spreads;\n  }\n}\n\ninterface FragmentSpreadMap {\n  [fragmentSpreadName: string]: FragmentSpreadNode;\n}\n"]},"metadata":{},"sourceType":"module"}